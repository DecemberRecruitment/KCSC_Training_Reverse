from copy import deepcopy as copy

sboxInv = [
        0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
        0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
        0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
        0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
        0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
        0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
        0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
        0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
        0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
        0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
        0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
        0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
        0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
        0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
]

def transpose4x4(m):
    return m[0::4] + m[1::4] + m[2::4] + m[3::4]

def list2hex(list):
    list = list[::-1]
    hex = ""
    for e in list:
        hex += "{:02X}".format(e)
    return hex

def hex2list(hex):
    byte_list = [hex[i:i+2] for i in range(0, len(hex), 2)][::-1]
    hex = ''.join(byte_list)
    lst = []
    if len(hex) % 2 == 0:
        for i in range(len(hex)//2):
            lst.append(int(hex[i*2:i*2+2], 16))
    return lst

def xor(bytelist1, bytelist2):
    res = []
    length = min(len(bytelist1), len(bytelist2))
    for i in range(length):
        res.append(bytelist1[i] ^ bytelist2[i])
    return res

def aesdec_cal(state, roundkey, last=False):
    def rotate(word, n):
        return word[n:]+word[0:n]

    def shift_rows_inv(state):
        for i in range(4):
            state[i*4:i*4+4] = rotate(state[i*4:i*4+4],-i)

    def sub_bytes_inv(state):
        for i in range(16):
            state[i] = sboxInv[state[i]]

    def galoisMult(a, b):
        p = 0
        hiBitSet = 0
        for i in range(8):
            if b & 1 == 1:
                p ^= a
            hiBitSet = a & 0x80
            a <<= 1
            if hiBitSet == 0x80:
                a ^= 0x1b
            b >>= 1
        return p % 256

    def mixColumnInv(column):
        temp = copy(column)
        column[0] = galoisMult(temp[0],14) ^ galoisMult(temp[3],9) ^ \
                    galoisMult(temp[2],13) ^ galoisMult(temp[1],11)
        column[1] = galoisMult(temp[1],14) ^ galoisMult(temp[0],9) ^ \
                    galoisMult(temp[3],13) ^ galoisMult(temp[2],11)
        column[2] = galoisMult(temp[2],14) ^ galoisMult(temp[1],9) ^ \
                    galoisMult(temp[0],13) ^ galoisMult(temp[3],11)
        column[3] = galoisMult(temp[3],14) ^ galoisMult(temp[2],9) ^ \
            galoisMult(temp[1],13) ^ galoisMult(temp[0],11)
        return column
    

    def mix_columns_inv(data):
        new = bytearray(16)
        for i in range(4):
            column = [data[i], data[i+4], data[i+8], data[i+12]]
            column = mixColumnInv(column)
            data[i], data[i+4], data[i+8], data[i+12] = column[0], column[1], column[2], column[3]
            # new[i*4: i*4+4] = column[0], column[1], column[2], column[3]
        return data

    state = xor(state, roundkey)
    if not last:
        state = mix_columns_inv(state)
    shift_rows_inv(state)
    sub_bytes_inv(state)
    return state

def aesdec(dat, k):
    data = transpose4x4(hex2list(dat.hex()))
    key = transpose4x4(hex2list(k.hex()))    
    res = transpose4x4(aesdec_cal(data, key))
    return bytes.fromhex(list2hex(res))

def aesdeclast(dat, k):
    data = transpose4x4(hex2list(dat.hex()))
    key = transpose4x4(hex2list(k.hex()))    
    res = transpose4x4(aesdec_cal(data, key, last=True))
    return bytes.fromhex(list2hex(res))

map = [
    0xFF, 0xFE, 0xFD, 0xFC, 0xFB, 0xFA, 0xF9, 0xF8, 0xF7, 0xF6, 0xF5, 0xF4, 0xF3, 0xF2, 0xF1, 0xF0,
    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
    0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F,
    0xB7, 0x73, 0xC2, 0x9F, 0xB3, 0x76, 0xC4, 0x98, 0xBB, 0x7F, 0xCE, 0x93, 0xB7, 0x72, 0xC0, 0x9C,
    0xB9, 0x51, 0xA8, 0xCD, 0xAD, 0x44, 0xBE, 0xDA, 0xB5, 0x5D, 0xA4, 0xC1, 0xA9, 0x40, 0xBA, 0xDE,
    0x8D, 0x87, 0xDF, 0x4C, 0x3E, 0xF1, 0x1B, 0xD4, 0x85, 0x8E, 0xD5, 0x47, 0x32, 0xFC, 0x15, 0xDB,
    0x9A, 0xE1, 0xF1, 0x74, 0x37, 0xA5, 0x4F, 0xAE, 0x82, 0xF8, 0xEB, 0x6F, 0x2B, 0xB8, 0x51, 0xB1,
    0xD6, 0x56, 0x17, 0xBD, 0xE8, 0xA7, 0x0C, 0x69, 0x6D, 0x29, 0xD9, 0x2E, 0x5F, 0xD5, 0xCC, 0xF5,
    0x55, 0xE2, 0xBA, 0x92, 0x62, 0x47, 0xF5, 0x3C, 0xE0, 0xBF, 0x1E, 0x53, 0xCB, 0x07, 0x4F, 0xE2,
    0xA9, 0xD2, 0x8F, 0xA2, 0x41, 0x75, 0x83, 0xCB, 0x2C, 0x5C, 0x5A, 0xE5, 0x73, 0x89, 0x96, 0x10,
    0xDA, 0x45, 0x2A, 0x58, 0xB8, 0x02, 0xDF, 0x64, 0x58, 0xBD, 0xC1, 0x37, 0x93, 0xBA, 0x8E, 0xD5,
    0x87, 0xCB, 0x8C, 0x7E, 0xC6, 0xBE, 0x0F, 0xB5, 0xEA, 0xE2, 0x55, 0x50, 0x99, 0x6B, 0xC3, 0x40,
    0x34, 0x3A, 0x04, 0x51, 0x8C, 0x38, 0xDB, 0x35, 0xD4, 0x85, 0x1A, 0x02, 0x47, 0x3F, 0x94, 0xD7,
    0xA7, 0xE9, 0x82, 0xDE, 0x61, 0x57, 0x8D, 0x6B, 0x8B, 0xB5, 0xD8, 0x3B, 0x12, 0xDE, 0x1B, 0x7B,
    0xFD, 0x27, 0xAB, 0x70, 0x71, 0x1F, 0x70, 0x45, 0xA5, 0x9A, 0x6A, 0x47, 0xE2, 0xA5, 0xFE, 0x90,
    0xC7, 0x52, 0xE2, 0x46, 0xA6, 0x05, 0x6F, 0x2D, 0x2D, 0xB0, 0xB7, 0x16, 0x3F, 0x6E, 0xAC, 0x6D
]

flag_en = [
    0x7D, 0x6B, 0xDF, 0x9F, 0x9A, 0x3B, 0x23, 0x98, 0xB3, 0xA4, 0xB4, 0x1C, 0x26, 0x5F, 0x7A, 0x0D,
    0x17, 0x68, 0xD0, 0x9D, 0xB1, 0x73, 0xFF, 0x4E, 0x24, 0xBF, 0xEC, 0xBB, 0x55, 0xF5, 0xAF, 0x7D,
    0x53, 0x42, 0xDF, 0x3A, 0xEC, 0xED, 0xA6, 0x31, 0x4A, 0x81, 0x4D, 0xFF, 0xBE, 0x4E, 0xC6, 0xEF,
    0xBA, 0xDD, 0xAA, 0x15, 0x02, 0xB7, 0xF7, 0x77, 0x65, 0x43, 0xF3, 0x78, 0xCC, 0xEE, 0x14, 0xCA,
    0x17, 0x2C, 0x14, 0xC7, 0x41, 0x10, 0xC4, 0x35, 0xFE, 0x78, 0x6F, 0xB4, 0xFC, 0xDD, 0xD4, 0xAA,
    0x6B, 0x5C, 0xBA, 0x1C, 0x43, 0xC2, 0x86, 0x80, 0x18, 0x62, 0x15, 0xD2, 0x1E, 0x0B, 0x6B, 0x9E,
    0xE9, 0x2C, 0x83, 0x9F, 0x61, 0x70, 0x0F, 0xDC, 0x78, 0x92, 0x59, 0x39, 0x48, 0xC1, 0xE7, 0xC2,
    0x38, 0x11, 0x45, 0xA3, 0x60, 0x3D, 0xCA, 0x8F, 0x12, 0xB6, 0xEC, 0x9C, 0x0F, 0x60, 0xD9, 0x26,
    0x1C, 0xB2, 0x5D, 0xB2, 0x59, 0x64, 0x7A, 0x7E, 0x6D, 0x70, 0x21, 0x2A, 0xDD, 0x24, 0x6B, 0x8E,
    0x15, 0x2A, 0x38, 0x82, 0xCD, 0x8A, 0x36, 0x33, 0x54, 0x4D, 0x22, 0x66, 0x5C, 0xE5, 0x8A, 0xEA
]

def _xor(a, b):
    map = []
    for i in range(len(a)):
        map.append(a[i] ^ b[i])
    return map

_header = map[0:0x10]

if __name__ == "__main__":
    ans = []
    for i in range(0, len(flag_en), 0x10):
        if len(flag_en) - i == 0x10: map[0:0x10] = _header[::1]
        else: map[0:0x10] = flag_en[i+0x10:i+0x20]
        _XMM0 = flag_en[i:i+0x10]
        _XMM0 = bytes(_XMM0[::-1])
        _XMM1 = map[0x90:0xA0]
        _XMM2 = map[0xA0:0xB0]
        _XMM3 = map[0xB0:0xC0]
        _XMM4 = map[0xC0:0xD0]
        _XMM5 = map[0xD0:0xE0]
        _XMM6 = map[0xE0:0xF0]
        _XMM7 = map[0xF0:0x100]
        _XMM1 = bytes(_XMM1[::-1])
        _XMM2 = bytes(_XMM2[::-1])
        _XMM3 = bytes(_XMM3[::-1])
        _XMM4 = bytes(_XMM4[::-1])
        _XMM5 = bytes(_XMM5[::-1])
        _XMM6 = bytes(_XMM6[::-1])
        _XMM7 = bytes(_XMM7[::-1])
        _XMM0 = aesdeclast(_XMM0, _XMM7)
        _XMM0 = aesdec(_XMM0, _XMM6)
        _XMM0 = aesdec(_XMM0, _XMM5)
        _XMM0 = aesdec(_XMM0, _XMM4)
        _XMM0 = aesdec(_XMM0, _XMM3)
        _XMM0 = aesdec(_XMM0, _XMM2)
        _XMM0 = aesdec(_XMM0, _XMM1)
        _XMM1 = map[0x20:0x30]
        _XMM2 = map[0x30:0x40]
        _XMM3 = map[0x40:0x50]
        _XMM4 = map[0x50:0x60]
        _XMM5 = map[0x60:0x70]
        _XMM6 = map[0x70:0x80]
        _XMM7 = map[0x80:0x90]
        _XMM1 = bytes(_XMM1[::-1])
        _XMM2 = bytes(_XMM2[::-1])
        _XMM3 = bytes(_XMM3[::-1])
        _XMM4 = bytes(_XMM4[::-1])
        _XMM5 = bytes(_XMM5[::-1])
        _XMM6 = bytes(_XMM6[::-1])
        _XMM7 = bytes(_XMM7[::-1])
        _XMM0 = aesdec(_XMM0, _XMM7)
        _XMM0 = aesdec(_XMM0, _XMM6)
        _XMM0 = aesdec(_XMM0, _XMM5)
        _XMM0 = aesdec(_XMM0, _XMM4)
        _XMM0 = aesdec(_XMM0, _XMM3)
        _XMM0 = aesdec(_XMM0, _XMM2)
        _XMM0 = aesdec(_XMM0, _XMM1)
        _XMM0 = list(_XMM0)
        _XMM0 = _XMM0[::-1]
        vars10 = map[0x10:0x20]
        vars0 = map[0x00:0x10]
        vars0 = _xor(vars0, vars10)
        _XMM0 = _xor(_XMM0, vars0)
        flag_en[i:i+0x10] = _XMM0

    for i in range(0, len(flag_en), 0x10):
        tmp = flag_en[i:i+0x10]
        map = tmp + map
    map = bytes(map)
    print(map)