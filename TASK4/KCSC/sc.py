flag_en = [
    # 0x41, 0xA5, 0xC3, 0xC7, 0x9A, 0x35, 0x7E, 0xE9, 0x20, 0xB8, 
    # 0x4C, 0xB8, 0x46, 0x50, 0x29, 0x0A, 0xAC, 0xC2, 0x19, 0xFA, 
    # 0xAB, 0xCC, 0xE4, 0xF4, 0x92, 0x68, 0xFE, 0xDF, 0xD6, 0x22, 
    # 0xAA, 0x2A, 0x3D, 0xA5, 0x3A, 0x58, 0x28, 0x84, 0x35, 0x0F, 
    # 0xE6, 0xE9, 0x31, 0x92
    0x0F, 0x21, 0xCB, 0x47, 0xF6, 0xB0, 0x0E, 0xA0, 0x69, 0x51, 
    0x5A, 0x08, 0x47, 0x7E, 0x21, 0xD5, 0x8E, 0x31, 0xF4, 0xD6, 
    0xAF, 0xD0, 0x9A, 0x40, 0x03, 0x2B, 0xD6, 0x4C, 0xD7, 0x58, 
    0xD1, 0x47, 0xD6, 0xA9, 0x9E, 0x29, 0x64, 0x73, 0xAA, 0x48, 
    0xDF, 0x46, 0xC2, 0xBA, 0x4A
]

dataX = [
    0xd1, 0x46, 0x40, 0x91, 0x2f, 0x64, 0x42, 0xd6, 0xe9, 0x2d,
    0x19, 0x28, 0x10, 0xc8, 0x79, 0x88, 0x70, 0x32, 0xc6, 0x47,
    0x35, 0x8d, 0x33, 0xe7, 0xb8, 0x70, 0xf2, 0x87, 0xdb, 0xdb,
    0xdb, 0xfd, 0x26, 0x5b, 0xa6, 0xb5, 0xa5, 0xdf, 0x9a, 0x5b,
    0x57, 0xb7, 0xb5, 0x7d, 0xc4, 0xad, 0xe5, 0xc4, 0x72, 0x56,
    0x58, 0x11, 0x2b, 0xab, 0x86, 0x5a, 0x76, 0x8a, 0x67, 0x3e,
    0x82, 0x8c, 0x74, 0x91, 0xc9, 0x66, 0x32, 0x1d, 0x3d, 0xd3,
    0x33, 0x80, 0xd1, 0x10, 0xe7, 0xc7, 0x59, 0x4e, 0x31, 0x65,
    0x91, 0xed, 0x66, 0x18, 0xbe, 0x9b, 0x0c, 0x26, 0x78, 0x75,
    0xe7, 0x9e, 0x0c, 0xe8, 0xc2, 0xe6, 0xfc, 0x3c, 0x53, 0x8c,
    0xc1, 0x0b, 0x2a, 0x12, 0x31, 0xaa, 0xa8, 0x32, 0x1b, 0x68,
    0x90, 0x68, 0xf9, 0xbc, 0x73, 0xb7, 0x3e, 0xe4, 0x09, 0xae,
    0xc9, 0xe9, 0xcd, 0xac, 0x8a, 0xc4, 0x8c, 0x4f, 0x0f, 0x68,
    0xda, 0xa8, 0x76, 0x2a, 0x8a, 0x6d, 0x53, 0x7f, 0xac, 0xd5,
    0xfe, 0x3c, 0x9f, 0x5c, 0x9a, 0x15, 0x22, 0x16, 0x7f, 0x1c,
    0xcc, 0x92, 0x13, 0x51, 0xbf, 0xcf, 0x7c, 0x95, 0xca, 0xff,
    0xcb, 0x59, 0xaf, 0xe9, 0x25, 0x0f, 0x4a, 0xa6, 0x4c, 0x1e,
    0x7a, 0xd4, 0x2d, 0x58, 0xb0, 0xb0, 0x2a, 0xd6, 0xb5, 0x8c,
    0xbf, 0x15, 0xa7, 0xb3, 0x77, 0xeb, 0xea, 0x03, 0xd0, 0x4a,
    0xc4, 0x65, 0x9b, 0xd4, 0xc1, 0xe8, 0xd8, 0xb6, 0x44, 0xe1,
    0x5b, 0x1e, 0x99, 0x1c, 0x7e, 0xdf, 0xb5, 0x62, 0x27, 0xb2,
    0x93, 0x5e, 0xfa, 0x39, 0x70, 0xbf, 0x58, 0x4f, 0x23, 0xaf,
    0x6a, 0xa7, 0xad, 0x48, 0xe8, 0x14, 0x19, 0x76, 0x20, 0x1d,
    0x1d, 0x63, 0x03, 0x42, 0xf3, 0x1d, 0x63, 0x03, 0x42, 0xf3,
    0x17, 0xaf, 0x87, 0xbc, 0x87, 0x26, 0xec, 0x84, 0x84, 0xac,
    0x85, 0x4d, 0xfd, 0xf7, 0x09, 0x1f, 0x55, 0x86, 0x90, 0x21,
    0x81, 0xc8, 0xc8, 0xda, 0x75, 0x4d, 0xaf, 0x15, 0xaf, 0x4e,
    0xee, 0x99, 0x69, 0x39, 0xb0, 0x7a, 0xf6, 0xfb, 0x94, 0x16,
    0x41, 0x48, 0xec, 0x38, 0x28, 0xcd, 0x05, 0x1c, 0xc6, 0x49,
    0xce, 0x18, 0xe0, 0x1a, 0x6e, 0x66, 0xe4, 0xa4, 0xf2, 0x96,
    0x4b, 0xec, 0x74, 0x24, 0xa7, 0xef, 0xda, 0x64, 0x0a, 0x8a,
    0xa3, 0x29, 0xd7, 0xd8, 0xb5, 0x0a, 0xc1, 0x42, 0x08, 0xdc,
    0x46, 0x2b, 0x33, 0x22, 0xf3, 0xc9, 0xdf, 0x22, 0x69, 0xcd,
    0x66, 0xcf, 0x04, 0x2a, 0x07, 0x01, 0x2f, 0x05, 0xb6, 0x07,
    0xba, 0xf8, 0xe5, 0x7e, 0x9b, 0x52, 0xfc, 0x91, 0x49, 0x86,
    0x25, 0xa3, 0x2e, 0x64, 0x9e, 0xf1, 0xfc, 0x0f, 0x35, 0x21,
    0x28, 0x6d, 0x48, 0x63, 0xf5, 0x11, 0xd5, 0xc8, 0xd4, 0xc1,
    0xd0, 0x05, 0x9c, 0x5c, 0xaa, 0x49, 0x1b, 0xef, 0x75, 0xbd,
    0x6a, 0x90, 0xbd, 0x13, 0x76, 0x6e, 0xad, 0xff, 0xe2, 0xfb,
    0x25, 0x39, 0xba, 0x15, 0x2d, 0xc3, 0x61, 0x75, 0x8e, 0xd7,
    0xad, 0xd4, 0x68, 0xe4, 0x2c, 0x7c, 0xe8, 0xd1, 0x46, 0x74,
    0x49, 0x5f, 0x26, 0x01, 0xed, 0x84, 0xcd, 0x71, 0x2d, 0x27,
    0x73, 0xe9, 0xab, 0x87, 0x09, 0x14, 0xf0, 0x51, 0x0e, 0xcc,
    0x0c, 0xce, 0xbf, 0xbb, 0x2f, 0x86, 0x09, 0x89, 0x46, 0xda,
    0x59, 0x3c, 0x4d, 0xc4, 0x88, 0x19, 0x63, 0xf9, 0xa0, 0x76,
    0x26, 0x45, 0x2d, 0xa4, 0x66, 0x76, 0x5b, 0x71, 0x21, 0x13,
    0x36, 0xc1, 0x77, 0xec, 0xf4, 0xf3, 0xed, 0x11, 0xa8, 0xf0,
    0x2b, 0x4b, 0xa8, 0xa2, 0xb7, 0x32, 0x53, 0x58, 0x6b, 0xd1,
    0x27, 0xeb, 0xe2, 0x05, 0xe7, 0x1f, 0x58, 0x68, 0x07, 0x3c,
    0x9d, 0x1e, 0x30, 0x22, 0xc9, 0xa5, 0x85, 0x41, 0xd4, 0xde,
    0x45, 0x28, 0xb1, 0x26, 0x61, 0x16, 0xbb, 0x58, 0xf8, 0xb2,
    0xad, 0xf4, 0xec, 0x9b, 0x92, 0x13, 0x0d, 0x64, 0xda, 0x8f,
    0x08, 0xd4, 0xf1, 0xcc, 0xea, 0x33, 0xc1, 0x1b, 0xc5, 0x6d,
    0xf6, 0xab, 0x4e, 0x1f, 0x3f, 0x67, 0x7a, 0xf0, 0xe0, 0xef,
    0x1d, 0xa5, 0x3a, 0x18, 0xdd, 0x3b, 0x3c, 0x65, 0xa5, 0x07,
    0x5d, 0x89, 0x29, 0xac, 0xea, 0x8b, 0x23, 0x2b, 0xd3, 0x58,
    0x3b, 0xbc, 0xcc, 0x69, 0x3b, 0x20, 0x64, 0xe4, 0xdb, 0xcd,
    0x4e, 0x61, 0xac, 0x17, 0xaf, 0x98, 0xea, 0xea, 0x87, 0xdf,
    0xdd, 0x36, 0x41, 0xf3, 0x46, 0x0d, 0x6b, 0xc9, 0xb1, 0x71,
    0xf6, 0x0e, 0xd9, 0x0c, 0x7e, 0xa1, 0x43, 0xcd, 0x83, 0x04,
    0xa4, 0x6a, 0xa9, 0x60, 0x14, 0x4d, 0x77, 0x88, 0x04, 0xbf,
    0x3e, 0x51, 0xab, 0xbe, 0x09, 0x2c, 0xc0, 0xe6, 0x1f, 0xe5,
    0x42, 0xff, 0x15, 0x32, 0xfc, 0x4a, 0x22, 0x94, 0xf8, 0x66,
    0xca, 0x8d, 0x91, 0xaf, 0x8b, 0x61, 0xa4, 0x38, 0x17, 0x1e,
    0xd4, 0x6f, 0x19, 0x50, 0xbf, 0x68, 0xb0, 0x12, 0x91, 0x2a,
    0xc0, 0x83, 0x12, 0xbd, 0x0c, 0x69, 0xc9, 0x95, 0xac, 0x6e,
    0xcf, 0xce, 0xae, 0xb4, 0x58, 0x6f, 0xa4, 0x26, 0xb8, 0x9c,
    0x40, 0x54, 0x5b, 0xb1, 0x48, 0x80, 0xd2, 0x62, 0xc3, 0xbd,
    0x8a, 0xfa, 0x60, 0x10, 0x17, 0xb2, 0xe8, 0x35, 0x11, 0x64,
    0x85, 0x70, 0x3c, 0x9a, 0x10, 0x2a, 0x12, 0xd9, 0x9f, 0xbe,
    0x69, 0x35, 0x63, 0x5e, 0x4a, 0x2f, 0x11, 0x50, 0xe2, 0x34,
    0x78, 0x0e, 0xbd, 0x85, 0x57, 0x15, 0xae, 0x7c, 0x0b, 0x85,
    0xfa, 0x15, 0xdf, 0xf9, 0xa3, 0x7e, 0x0c, 0x15, 0xd8, 0x82,
    0x86, 0xdd, 0xfe, 0x51, 0xda, 0xa9, 0x31, 0x22, 0xda, 0xdb,
    0x0b, 0xff, 0xe7, 0x33, 0x63, 0xa3, 0xea, 0xe2, 0x61, 0x35,
    0x19, 0x62, 0x35, 0x87, 0x13, 0xde, 0x35, 0x85, 0xfc, 0x18,
    0x42, 0xbc, 0x12, 0x0e, 0x77, 0x61, 0x25, 0x6c, 0x97, 0x1a,
    0x2d, 0x72, 0x41, 0x1b, 0x99, 0x49, 0xae, 0x7e, 0x97, 0x66,
    0x72, 0x58, 0x48, 0xf9, 0x25, 0x61, 0x81, 0x38, 0x83, 0x6a,
    0x7e, 0x71, 0xa0, 0x02, 0x38, 0x50, 0x93, 0x6d, 0xd3, 0x59,
    0xc0, 0xe3, 0x3e, 0xd7, 0xa7, 0xc4, 0x8b, 0x5a, 0x49, 0x0c,
    0x1b, 0x0b, 0x75, 0xd7, 0x96, 0x97, 0x1d, 0x32, 0xf9, 0x11,
    0x24, 0xb0, 0xee, 0x4c, 0x91, 0x9d, 0x66, 0x51, 0xa9, 0x3c,
    0x4c, 0x41, 0xb8, 0xe5, 0xe7, 0x9a, 0x22, 0xd4, 0xf3, 0x1d,
    0xbb, 0x3a, 0x06, 0x88, 0x2c, 0x07, 0x27, 0x85, 0x74, 0x0c,
    0x0a, 0xb3, 0x99, 0x05, 0x2a, 0x60, 0xdf, 0x02, 0x7b, 0x60,
    0xbb, 0xe5, 0xc4, 0xb7, 0x30, 0x57, 0x14, 0x81, 0x6d, 0xe5,
    0x88, 0xd1, 0x43, 0x13, 0x83, 0x32, 0x99, 0xbf, 0x4d, 0x56,
    0xc6, 0xa1, 0x2f, 0x66, 0x53, 0x87, 0xb3, 0x93, 0x14, 0xa3,
    0x5e, 0x5e, 0x87, 0x86, 0x79, 0x33, 0xec, 0xf1, 0xc0, 0x64,
    0xab, 0xf2, 0x23, 0x4d, 0x40, 0xdc, 0xc3, 0xc4, 0x3f, 0x3a,
    0x15, 0x28, 0xb7, 0x86, 0xe1, 0xd7, 0x15, 0xda, 0x74, 0xc1,
    0x05, 0x44, 0x46, 0x05, 0x28, 0x07, 0xd6, 0xbe, 0xaf, 0x5c,
    0xa8, 0x3b, 0x0b, 0x14, 0x4e, 0x14, 0xcf, 0xb7, 0xf1, 0xab,
    0x7c, 0xf5, 0x63, 0xf0, 0xdc, 0xc2, 0x30, 0xdb, 0xc5, 0x2f,
    0xb9, 0xc5, 0x57, 0x2a, 0xbf, 0x50, 0xf5, 0x39, 0x5d, 0x5a,
    0x76, 0x63, 0x93, 0x7b, 0x61, 0x1d, 0x12, 0xe7, 0xc3, 0x0b,
    0x61, 0xa9, 0xfb, 0x26, 0x15, 0x62, 0xba, 0x32, 0x35, 0x4e,
    0x09, 0xc2, 0x32, 0x31, 0xb2, 0x95, 0xd5, 0x8e, 0x51, 0xa2,
    0xc3, 0x34, 0x1d, 0xb8, 0x61, 0x8d, 0x25, 0xb5, 0x97, 0x1d,
    0x02, 0xfa, 0x55, 0xf9, 0xa3, 0xb1, 0x4a, 0xba, 0x4c, 0xbe,
    0x2b, 0x41, 0xa8, 0x71, 0x5f, 0x1b, 0xdd, 0x2c, 0x54, 0x76,
    0x58, 0xc1, 0xde, 0x6e, 0x2a, 0x7c, 0x5f, 0x93, 0xa1, 0x04,
    0xdf, 0x45, 0x31, 0xe0, 0x11, 0x32, 0x47, 0x9b, 0x1c, 0x0d,
    0x04, 0x92, 0x02, 0x44, 0x29, 0xb2, 0x11, 0x32, 0x7c, 0xd6,
    0xf1, 0x2e, 0xbe, 0xb3, 0xa9, 0x04
]

def hello(flag):
    for MODE in range(0, 24):
        if MODE % 2 == 0:
            tmp = 0
            for i in range(44):
                if (i + MODE * 44) % 3 == 0:
                    if i == 0: tmp = flag[i] ^ dataX[i + MODE * 44]
                    else:
                        v12 = flag[i] ^ ((flag[i - 1] - dataX[i + MODE * 44]) & 0xFF)
                        flag[i - 1] = tmp
                        tmp = v12
                        if i == 43: flag[i] = tmp
                elif (i + MODE * 44) % 3 == 1:
                    if i == 0: tmp = (flag[i] + dataX[i + MODE * 44]) & 0xFF
                    else:
                        v12 = (flag[i] + (flag[i - 1] ^ dataX[i + MODE * 44])) & 0xFF
                        flag[i - 1] = tmp
                        tmp = v12
                        if i == 43: flag[i] = tmp
                elif (i + MODE * 44) % 3 == 2:
                    if i == 0: tmp = (flag[i] - dataX[i + MODE * 44]) & 0xFF
                    else:
                        v12 = (flag[i - 1] + dataX[i + MODE * 44] - flag[i]) & 0xFF
                        flag[i - 1] = tmp
                        tmp = v12
                        if i == 43: flag[i] = tmp
        else:
            v8 = flag[0]
            for i in range(44):
                if (i + MODE * 44) % 3 == 0:
                    if i != 43: flag[i] ^= (flag[i + 1] - dataX[i + MODE * 44]) & 0xFF
                    else: flag[i] ^= (v8 - dataX[i + MODE * 44]) & 0xFF
                elif (i + MODE * 44) % 3 == 1:
                    if i == 43: flag[i] = (flag[i] + (v8 ^ dataX[i + MODE * 44])) & 0xFF
                    else: flag[i] = (flag[i] + (dataX[i + MODE * 44] ^ flag[i + 1])) & 0xFF
                elif (i + MODE * 44) % 3 == 2:
                    if i == 43: flag[i] = (v8 + dataX[i + MODE * 44] - flag[i]) & 0xFF
                    else: flag[i] = (dataX[i + MODE * 44] + flag[i + 1] - flag[i]) & 0xFF
    return flag

from z3 import *

if __name__ == '__main__':
    flag = [BitVec(f"flag[{i}]", 8) for i in range(44)]
    s = Solver()
    for i in range(44): s.add(flag[i] >= 33, flag[i] <= 126)
    s.add(flag[0] == 0x64)
    s.add(flag[1] == 0x65)
    s.add(flag[2] == 0x28)
    s.add(flag[3] == 0x52)
    s.add(flag[4] == 0x59)
    s.add(flag[5] == 0x70)
    s.add(flag[6] == 0x74)
    s.add(flag[7] == 0x33)
    s.add(flag[8] == 0x64)
    s.add(flag[9] == 0x5F)
    s.add(flag[10] == 0x62)
    s.add(flag[11] == 0x75)
    flag = hello(flag)
    for i in range(44): s.add(flag[i] == flag_en[i])
    if s.check() == sat:
        m = s.model()
        print(m)
    else: print(":<")
