f = open("flag", 'rb')
byte = f.read()

_0xF8_BYTE = []
for i in range(0x1F):
    _0xF8_BYTE.append(byte[0x3778 + 0x40 * i: 0x3778 + 0x40 * i + 0x40])

_0x68_BYTE = []
for i in range(0xD):
    _0x68_BYTE.append(byte[0x40 + 0x38 * i: 0x40 + 0x38 * i + 0x38])

# for i in _0xF8_BYTE: print(i)

map = [i for i in range(256)]
key = [
    0x4E, 0x58, 0x72, 0x77, 0x4D, 0x65, 0x37, 0x55, 0x6B, 0x54, 
    0x30, 0x46, 0x32, 0x53, 0x4D, 0x30
]
tmp = 0
for i in range(256):
    tmp = (map[i] + tmp + key[i % len(key)]) % 256
    map[i], map[tmp] = map[tmp], map[i]

cipher1 = [
0x4D, 0x75, 0xAC, 0xEA, 0x75, 0xAB, 0x78, 0x07, 0x90, 0x58,
0x8E, 0x25, 0x07, 0x84, 0x3F, 0x73, 0x2B, 0xA2, 0x70, 0x40,
0x78, 0x62, 0x4B, 0xFD, 0x65, 0xF0, 0x9B, 0x07, 0x58, 0x44,
0x9D, 0xCA, 0x5A, 0x37, 0xF9, 0xE1, 0x67, 0xD2, 0x21, 0x62,
0x46, 0x25, 0x8C, 0x1C, 0xC3, 0x05, 0x66, 0x79, 0x4F, 0x07,
0x4A, 0x53, 0xF5, 0xA5, 0x7F, 0x4D, 0x41, 0xB3, 0x30, 0xBD,
0x5F, 0xB3, 0x24, 0xA0, 0x8C, 0xD4, 0x07, 0xEC, 0x0B, 0x57,
0x40, 0xD8, 0xB6, 0xDD, 0x75, 0xE6, 0x5D, 0xF7, 0xAB, 0x60,
0x6C, 0x36, 0x54, 0xFC, 0x77, 0x93, 0x5F, 0xF9, 0x83, 0x7A,
0xD0, 0x49, 0xCA, 0xD6, 0xAC, 0x1B, 0xF1, 0xCE, 0x4C, 0xB1,
0x7A, 0x70, 0x82, 0x88, 0xDF, 0x91, 0x93, 0xFB, 0xF9, 0x14,
0xB8, 0xC1, 0x0D, 0xC3, 0xBD, 0x57, 0xEA, 0x95, 0xC1, 0x99,
0xDA, 0x9E, 0xE5, 0xD2, 0x59, 0x4A, 0xFA, 0xDB, 0x25, 0x7C,
0xAC, 0x27, 0xF1, 0xBC, 0xCC, 0x23, 0xD9, 0x6B, 0x64, 0xCC,
0xC2, 0x5A, 0xD6, 0x04, 0x9E, 0x20, 0xBD, 0xBC, 0xAC, 0xEF,
0x0A, 0xA8, 0x9F, 0x74, 0xAD, 0x68, 0xD6, 0xD3, 0xD2, 0xBB,
0xB3, 0x27, 0xBE, 0x90, 0xF1, 0x67, 0x5C, 0x77, 0xF5, 0xCB,
0xA1, 0x59, 0x43, 0x76, 0x91, 0x9C, 0xBC, 0x34, 0x90, 0xDE,
0xAA, 0x11, 0x1C, 0xBF, 0x7A, 0x9D, 0x51, 0x1B, 0x87, 0xCE,
0x4C, 0xA3, 0x2D, 0x91, 0x80, 0x7B, 0x6F, 0xB2, 0xBB, 0xF5,
0x8F, 0x70, 0x01, 0x2F, 0x3A, 0x37, 0xFA, 0xB6, 0x2B, 0x09,
0xE1, 0xD4, 0x80, 0xC7, 0x5E, 0xCD, 0x73, 0xBF, 0xE5, 0x9B,
0x07, 0x99, 0x4C, 0x47, 0x4A, 0x45, 0xD6, 0x6C, 0x31, 0x1A,
0x5D, 0x8A, 0x47, 0x6F, 0xAE, 0x2B, 0x19, 0x98, 0x07, 0x7B,
0x7F, 0x2F, 0xE8, 0xE6, 0xEF, 0xAB, 0xF3, 0x6A, 0x7F, 0x68,
0xD8, 0x25, 0xFB, 0xB7, 0xF2, 0x75, 0x1B, 0xDD, 0x83, 0x74,
0x2F, 0xCB, 0x63, 0x58, 0x88, 0x2D, 0xAD, 0xA3, 0x05, 0x92,
0x46, 0x47, 0xD1, 0x27, 0xA1, 0x5B, 0x2C, 0xCF, 0xCC, 0x6D,
0xB9, 0xF1, 0x73, 0x5F, 0x3B, 0xB0, 0xB0, 0xA2, 0x2D, 0xF3,
0x7B, 0xC5, 0x12, 0x32, 0xD9, 0x01, 0x55, 0x1E, 0x6B, 0xBD,
0x07, 0xB4, 0x91, 0x57, 0xF8, 0x76, 0x1B, 0x67, 0x0D, 0x87,
0x70, 0x0D, 0xB2, 0x4F, 0xCF, 0x16, 0xEA, 0x8D, 0x98, 0x08,
0x2F, 0x75, 0xE2, 0x9D, 0xDC, 0x41, 0xC5, 0x34, 0xDF, 0xCD,
0x48, 0x49, 0x66, 0x6F, 0x71, 0x1B, 0xF7, 0xA6, 0xB7, 0xA3,
0xEF, 0x3F, 0x0C, 0x23, 0x24, 0x9B, 0xA4, 0xE3, 0xCC, 0x62,
0x8A, 0xA0, 0xB1, 0x52, 0xAA, 0xE6, 0x8A, 0x1E, 0x4D, 0xD2,
0x4A, 0xF4, 0x59, 0x9D, 0xCF, 0x61, 0x38, 0xFC, 0x9B, 0x1D,
0x2D, 0x35, 0xE2, 0x49, 0x54, 0xC4, 0xEF, 0xA5, 0x4F, 0x91,
0xB3, 0xB7, 0xF1, 0xC8, 0xF7, 0x93, 0xC7, 0x41, 0xF3, 0x26,
0xD7, 0xEE, 0x51, 0x42, 0xA3, 0x79, 0x7B, 0x05, 0x8A, 0x01,
0xC4, 0xD6, 0xD3, 0x30, 0x6F, 0x75, 0x6A, 0x17, 0x3D, 0xF0,
0x4A, 0x18, 0x97, 0xB6, 0xCD, 0x3C, 0x33, 0x5C, 0x56, 0x8B,
0xD9, 0x90, 0x50, 0x7E, 0x56, 0x5E, 0xE5, 0xA7, 0x36, 0xE9,
0x9A, 0x1F, 0x85, 0x96, 0x96, 0x7A, 0xE7, 0xA1, 0x22, 0x99,
0x19, 0x1E, 0x23, 0x60, 0xB6, 0x0E, 0x65, 0xCF, 0x85, 0xF9,
0x84, 0xDC, 0x2A, 0xE8, 0x2F
]

cipher2 = [
    0x7D, 0x98, 0xE7, 0x63, 0x81, 0x86, 0x30
]

cipher3 = [
0x7C, 0x98, 0xE5, 0x63, 0xA4, 0xF5, 0x30, 0x8E, 0x5A, 0x50,
0x0D, 0xC1, 0xF7, 0xD4, 0x6B, 0x36, 0x1A, 0x62, 0x41, 0x89,
0x30, 0xEF, 0x76, 0x33, 0x65, 0xF0, 0x9B, 0xF8, 0x4D, 0x7B,
0xB2, 0xCA, 0x1B, 0x88, 0xDE, 0x9C, 0x2D, 0x8E, 0xDE, 0x62,
0x46, 0x25, 0x8C, 0x1C, 0xCC, 0x1A, 0x26, 0x79, 0x07, 0x8A,
0x77, 0x52, 0xC5, 0xA5, 0x7F, 0x05, 0xCC, 0xB6, 0xCA, 0x92,
0x5F, 0xB3, 0x6C, 0x99, 0x5E, 0xA0, 0x12, 0xA4, 0xF6, 0x52,
0x5E, 0xF7, 0x98, 0xDD, 0x3D, 0x63, 0xB9, 0x83, 0xA2, 0x9F,
0x91, 0x39, 0x4B, 0x7C, 0x45, 0x93, 0x5F, 0xF9, 0x36, 0x75,
0xCF, 0xC9, 0xEB, 0xD6, 0xAC, 0x1B, 0x90, 0x43, 0x71, 0x60,
0x48, 0x70, 0x82, 0xC0, 0x78, 0xA4, 0x59, 0xD4, 0x8F, 0x14,
0xF0, 0xE8, 0xDD, 0x8B, 0x34, 0xA7
]

# tmp, tmp1 = 0, 0
# for i in range(len(cipher1)):
#     tmp = (tmp + 1) % 256
#     tmp1 = (tmp1 + map[tmp]) % 256
#     map[tmp], map[tmp1] = map[tmp1], map[tmp]
#     cipher1[i] ^= map[(map[tmp1] + map[tmp]) % 256]

# for i in range(len(cipher1)):
#     if i % 10 == 9: print(f'0x{cipher1[i]:02X}', end = ',\n')
#     else: print(f'0x{cipher1[i]:02X}', end = ', ')



# tmp, tmp1 = 0, 0
# for i in range(len(cipher2)):
#     tmp = (tmp + 1) % 256
#     tmp1 = (tmp1 + map[tmp]) % 256
#     map[tmp], map[tmp1] = map[tmp1], map[tmp]
#     cipher2[i] ^= map[(map[tmp1] + map[tmp]) % 256]

# for i in range(len(cipher2)):
#     if i % 10 == 9: print(f'0x{cipher2[i]:02X}', end = ',\n')
#     else: print(f'0x{cipher2[i]:02X}', end = ', ')

tmp, tmp1 = 0, 0
for i in range(len(cipher3)):
    tmp = (tmp + 1) % 256
    tmp1 = (tmp1 + map[tmp]) % 256
    map[tmp], map[tmp1] = map[tmp1], map[tmp]
    cipher3[i] ^= map[(map[tmp1] + map[tmp]) % 256]

for i in range(len(cipher3)):
    if i % 10 == 9: print(f'0x{cipher3[i]:02X}', end = ',\n')
    else: print(f'0x{cipher3[i]:02X}', end = ', ')